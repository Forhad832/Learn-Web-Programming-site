export const jsdata = [
    {
        id:`1`,
        title:`জাভাস্ক্রিপ্ট  - Javascript `,
        category:'জাভাস্ক্রিপ্ট কি ',
        desc:[`জাভাস্ক্রিপ্ট হল একটি ক্লাইন্ট সাইড স্ক্রিপ্টিং ল্যাংগুয়েজ বা ব্রাউজার স্ক্রিপ্টিং ল্যাঙ্গুয়েজ। ক্লাইন্ট সাইড স্ক্রিপ্টিং ল্যাংগুয়েজ এর অর্থ হল ব্রাউজার এই স্ক্রিপ্ট গুলোকে run বা execute করবে। ক্লাইন্ট সাইড এর বিপরীত হল সার্ভার সাইড। সার্ভার সাইড ল্যাংগুয়েজ গুলোর কোড ওয়েব সার্ভার এর মাধ্যমে execute বা run হয়।`],
        titleTwo:[
            {
                head:`আপনি কি জানেন ?`,
                text:[`আপনি কি এইচটিএমএল অথবা এক্সএইচটিএমএল এবং সিএসএস সম্পর্কে জানেন? কারন জাভাস্ক্রিপ্ট সম্পর্কে জানার আগে আপনাকে এইচটিএমএল এবং সিএসএস সম্পর্কে ভালভাবে জানতে হবে। আপনি যদি এইচটিএমএল বা এক্সএইচটিএমএল এবং সিএসএস সম্পর্কে না জেনে থাকেন তবে আপনি আমাদের মূলপাতা বা homepage থেকে এগুলো সম্পর্কে পড়তে বা জানতে পারেন।`]
            },
            {
                head:`জাভাস্ক্রিপ্টঃ কি, কেন, কখন? ?`,
                text:[`জাভাস্ক্রিপ্ট! জাভাস্ক্রিপ্ট কি? জাভাস্ক্রিপ্ট একটা প্রোগ্রামিং ল্যাংগুয়েজ। হাই লেভেল প্রোগ্রামিং ল্যাংগুয়েজ। হাই লেভেল ল্যাংগুয়েজ মানে? হাই লেভেল ল্যাংগুয়েজ মানে এই ল্যাংগুয়েজ অনেকটা সফটলি কোডেড। আপনাকে আপনার ম্যাশিন সম্পর্কে খুব বেশী কিছু জানতে হবে না এর জন্যে। যেমন সি ইউজ করতে গেলে আপনাকে ম্যাশিন কিভাবে কাজ করে, কিভাবে কোড কম্পাইল করে, কিভাবে রান করে, মেমোরি কতটুকু নিবে এগুলা ভাবতে হয়। হাই লেভেল ল্যাংগুয়েজে এতোকিছু ভাবতে হয় না। এখানে ল্যাংগুয়েজই আপনার হয়ে অনেক কাজ করে দিবে। এতে সুবিধা কি? হ্যা সুবিধা হলো আপনি একটা কপ্লেক্স অ্যাপ বানাবেন এখন আপনাকে অ্যাপের ফানশানিলিটি নিয়ে না ভেবে, সেগুলা নিয়া না কাজ করে যদি একদম রুট থেকে শুরু করেন, কোন টাইপের ডাটা নিবেন, মেমোরি কতটুকু যাবে এগুলা নিয়াই ভাবতে হয়, সময় দিতে হয় তাহলে দেখা যাবে আপনার অ্যাপের ব্যাকবোনই বানাতে বানাতে হয় আপনার বাজেট শেষ, নয়তো আপনি মোটিভেশন হারিয়ে ফেলছেন। সেক্ষেত্রে জাভাস্ক্রিপ্ট এর মতো হাই লেভেল ল্যাংগুয়েজ ফ্লেক্সিবল হওয়ায় আপনি বিহ্যাইন্ড দ্যা সীনে কি হচ্ছে না হচ্ছে এতোকিছু না ভেবেও আপনার মেইন কাজ স্টার্ট করতে পারবেন। আপনার অ্যাপেন মেইন ফানশানিলিটিতে মন সময় দুইটাই দিতে পারতছেন। তাই জাভাস্ক্রিপ্ট কে ল্যাংগুয়েজ হিসাবে বাছাই করা এই সময়ে যথোপযুক্ত সিদ্ধান্ত বলে আমি মনে করি।`,`কিন্তু তারপরেও আরো প্রশ্ন থেকে যায়। কেন জাভাস্ক্রিপ্ট? হ্যা, আমরা তো জাভাস্ক্রিপ্ট কে পূর্বে শুধুমাত্র ডম ম্যানিপুলেশনের কিছু একটা বলেই ভাবতাম। ডম ম্যানিপুলেশন মানে একটা ওয়েব পেজে কিছু ইভেন্ট লাগানো, বাটনে ক্লিক করলে এই হবে, সেই হবে। তারপর লোগো চ্যাঞ্জ করা, কালার চ্যাঞ্জ করাসহ অ্যানিমেশন পর্যন্ত বড়জোর জাভাস্ক্রিপ্ট এর ক্ষমতা ছিলো। কিন্তু আধুনিক জাভাস্ক্রিপ্ট এর ক্ষমতা এখন কল্পনার বাইরে। এখন জাভাস্ক্রিপ্ট জাস্ট ডম ম্যানিপুলেশনের জন্য ইউজ হয়না। বরং জাভাস্ক্রিপ্ট এখন জটিল জটিল ক্রস প্ল্যাটফর্ম ওয়েব অ্যাপ্লিকেশন বানাতে ব্যবহার করা হয় এবং সবচেয়ে জনপ্রিয় প্রোগ্রামিং ল্যাংগুয়েজ ২০১৮ তে। নোড জেএস দিয়ে ওয়েব সার্ভার থেকে, ওয়েব অ্যাপ্লিকেশন, ক্রস প্ল্যাটফর্ম অ্যাপ্লিকেশনও বানাতে পারবেন। রিয়েক্ট, অ্যাঙ্গুলার জেএস, ভু জেএস দিয়ে আপনি ইন্ট্যারেক্টিভ ইউজার ইন্টারফেস বানাতে পারবেন। আবার এগুলা একসাথে করে ফুল স্ট্যাক ডেভেলপমেন্ট করতে পারবেন। জাভাস্ক্রিপ্ট ফ্রন্ট ইন্ড এবং ব্যাকেন্ড দুইটাই হ্যান্ডেল করতে পারে। মানে এক ল্যাংগুয়েজ দিয়েই সব। মানে আল্টিমেট ল্যাংগুয়েজ!`,]
            }
        ]
        
    },
    {
        id:2,
        category:'জাভাস্ক্রিপ্ট ইউজ ',
        title:`জাভাস্ক্রিপ্টঃ কোথায় এবং কিভাবে ইউজ করা হয়?`,
        desc:[`ওয়েবে সবচেয়ে ব্যবহৃত এবং জনপ্রিয় তিনটা টেকনোলিজীর হচ্ছেঃ`,
            `১। এইচ টি এম এল`,
            `২। সি এস এস`,
            `৩। জাভাস্ক্রিপ্ট`,
            `সব ওয়েবসাইট আর ওয়েব অ্যাপ্লিকেশনে এই তিনটা থাকবেই। মানে বলা চলে এগুলা ওয়েবের মেইন পাওয়ার।`,
            `জাভাস্ক্রিপ্ট এ বিশাল লাইব্রেরী আর ফ্রেমওয়ার্ক এর সমাহার থাকায় সব ধরনের কাজই করা যায় এর মাধ্যমে। প্রধানত দুইভাবে জাভাস্ক্রিপ্ট কে ওয়েবে ইউজ করা হয়ঃ`],
    titleTwo:[
        {
            head:`ক্লাইন্ট সাইড`,
            text:[`শুধুমাত্র ব্রাউজারে চলে`]
        },
        {
            head:` সার্ভার সাইড`,
            text:[`সার্ভারে চলে, সাধারণত সার্ভার থেকেই কোড জেনারেট হয় (যেমন নোড জেএস)

            জাভাস্ক্রিপ্ট অনেক লাইটওয়েট, ক্রস প্ল্যাটফর্ম এবং অবজেক্ট ওরিয়েন্টেড প্রোগ্রামিং ল্যাংগুয়েজ।`,`লাইটওয়েটঃ জাভাস্ক্রিপ্ট ম্যাশিনে খুব বেশী লোড নেয় না, আবার অনেক টেকনিকের কারণে অন্যান্য ল্যাংগুয়েজ থেকে বেস ফাস্ট এক্সিকিউট হয়।`,`ক্রস প্ল্যাটফর্মঃ আপনাকে শুধুমাত্র একবার অ্যাপ্লিকেশন বানালেই চলবে। এর জন্য আপনাকে কোন অপারেটিং সিস্টেমে, ম্যাক না উইন্ডোজ না লিনাক্স না অন্য কিছুতে আপনার অ্যাপ্লিকেশন চলবে সেটা ভাবার দরকার নাই। আমরা যেমন সব ওয়েবসাইটই সব অপারেটিং সিস্টেম থেকে অ্যাক্সেস করতে পারি, তেমনি জাভাস্ক্রিপ্ট অ্যাপ্লিকেশনও সব অপারেটিং সিস্টেমে চলবে খুব বেশী বা একেকটা অপারেটিং সিস্টেমের জন্য একেকবার ডেভেলপ করার দরকার নাই`]
        },
        {
            head:`অবজেক্ট ওরিয়েন্টেড`,
            text:[`ভাস্ক্রিপ্ট এ আলমোস্ট সবকিছুই অবজেক্ট। আপনি একটা অবজেক্ট, আপনার নাক, কান, নাম, গায়ের রঙ আছে। এগুলা সব আপনার মানে অবজেক্ট এর প্রোপার্টি। এই নিয়ে পরে বিস্তারিত আলোচনা করবো`,`জাভাস্ক্রিপ্ট এ আছে বিশাল ফ্রেমওয়ার্কের সমাহার। তবে এটা নিয়ে ভাবার কোনো দরকার নাই। বলতে গেলে বেশীর ভাগ ফ্রেমওয়ার্কই একেকটা একেক কাজের জন্যে। তাই আপনি যা করতে চাচ্ছেন সেটার সাথে যে ফ্রেমওয়ার্ক বেশী কাজে দিবে সেটাই শিখা শুরু করুন। আর ফ্রেমওয়ার্ক কয়েকদিন পর পর আপডেট হয় আউটডেটেড হয় এমন কিন্তু না। দেখুন ভালো করে খেয়াল করে দেখুন পপুলার ফ্রেমওয়ার্কগুলা মার্কেটে অনেকদিন ধরেই আছে এবং থাকবে। আর না থাকলেও বা সমস্যা কই। আপনার কাজ হচ্ছে প্রথম জাভাস্ক্রিপ্ট এর ব্যাসিক ইএস ৬ সহ শেষ করা তারপর আপনি যেকোনো ফ্রেমওয়ার্ক শিখতে পারবেন সহজেই। আর আমি আগেও বলেছি এখানে মূলত মেইন কন্সেপ্টগুলা একই থাকে। তাই ফ্রেমওয়ার্ক সুইচ করতেও বেশী সময় লাগে না বা তাতে সমস্যা হয় না। তাই আপনার জন্য ভালো হবে কোনটা ধরবো কোনটা ধরবো না ভেবে সোজা যেকোনো একটায় জাম্প করা।`,`জাভাস্ক্রিপ্ট এর ফ্রেমওয়ার্ক ইউজ করার সুবিধা কি?`,
        `১। সহজ`,
        `২। সেইফ`,
        `৩। ওপেন সোর্স`],
        }
    ]
   
    },
    {
        id:3,
        title:`জাভাস্ক্রিপ্ট ব্যাবহার পদ্ধতি- Use of JavaScript`,
        category:`ব্যাবহার পদ্ধতি`,
        desc:[`জাভাস্ক্রিপ্ট ও জাভাস্ক্রিপ্ট এর বিভিন্ন ফ্রেমওয়ার্ক গুলো, যেমন - Angular, React, jQuery, Vue.js, Ext.js, Ember.js ইত্যাদি ব্যবহার করে কোন ওয়েবসাইটকে খুব সহজভাবে সাজানো ও ইন্টার-একটিভ করে তোলা যায়।`],
        titleTwo:[
            {
                head:`ওয়েব পেজে জাভাস্ক্রিপ্ট ব্যবহার`,
                text:[`কোন ওয়েব পেজে অর্থাৎ এইচটিএমএল কোডের সাথে বিভিন্ন ভাবে জাভাস্ক্রিপ্ট ব্যবহার করা যায়। এইচটিএমএল কোডে ৪ ভাবে জাভাস্ক্রিপ্ট ব্যবহার করা যায়। নিছে এই 4টি পদ্ধতি দেখুন।`,
            `<head> ট্যাগের মাঝে,`,
            `<body> ট্যাগের মাঝে,`,
            `<head> ও <body> ট্যাগের মাঝে,` ,
             `বহিঃস্ত বা external ফাইল হিসেবে।`
        ]
            },
            {
                head:`<head> ট্যাগের মাঝে`,
                text:[`ফাংশন ও গুরুত্বপূর্ণ স্ক্রিপ্ট সমূহ, যার ওপর অন্য স্ক্রিপ্ট গুলো নির্ভর করে সেগুলো হেড সেকশনে অর্থাৎ <head> ট্যাগের মাঝে রাখা ভালো। যদি আপনি চান জাভাস্ক্রিপ্টকে কিছু ইভেন্ট এর ওপর রান করাবেন সেক্ষেত্রে আপনি জাভাস্ক্রিপ্টকে হেড সেকশনে রাখতে পারেন।`,
            `নিচে একটি উদাহরণ দেখুন যেখানে ইউজার যখন একটি বাটনে ক্লিক করবে তখন একটি alert box দেখাবে।`],
            input:[
                `উদাহরণ`,

                `<html>`,
               ` <head>`,
                `<script type="text/javascript">`,
                `<!--function sayHello() {`,
                `alert("Hello World")`,
                `}`,
                `//-->`,
               ` </script>`,
                `</head>`,

                `<body>`,
                    `<input type="button" onclick="sayHello()" value="Say Hello" />`,
               ` </body>`,
                `</html>`
            ]
            },
            {
                text:[`এখানে আমরা একটা ফাংশন তৈরি করেছি যার নাম sayHellow এবং এটাকে এইচটিএমএল ডকুমেন্টের হেড সেকশনে রাখা হয়েছে।।`]
            },
            {
                head:`<body> ট্যাগের মাঝে`,
                text:[`কোন ওয়েব পেজ লোড হওয়া মাত্রই আপনি যদি জাভাস্ক্রিপ্ট কাজ করাতে বা execute করাতে চান তবে সেক্ষেত্রে আপনি জাভাস্ক্রিপ্টকে বডী সেকশন অর্থাৎ <body> ট্যাগের মাঝে রাখা ভাল, এ ক্ষেত্রে কোন ফাংশন ডিক্লারেসনের প্রয়োজন নেই।`,
            `নিছে একটি উদাহরন দেখুন, যেখানে <body> ট্যাগের মাঝে জাভাস্ক্রিপ্ট কোড রাখা হয়েছে।`],
            input:[
                `উদাহরণ`,

               
              

                `<body>`,
                ` <script type="text/javascript">`,
                `   <!--document.write("Hello World")`,
                    `  //-->`,
                    `</script>`,
                    ` <p>This is web page body </p>`,
               ` </body>`,
                `</html>`
            ]
            },
            {
                head:`<head> ও <body> ট্যাগে ব্যবহার`,
                text:[`ওয়েব পেজের head ও body সেকশনে অর্থাৎ <head> ও <body> ট্যাগের মাঝে জাভাস্ক্রিপ্ট কোড ব্যবহার করা যায়।`,`নিচে একটি উদাহরণ দেখুন যেখানে একই সাথে হেড ও বডী উভয় সেকশনেই জাভাস্ক্রিপ্ট কোড রাখা হয়েছে।`],
                input:[
                    `উদাহরণ`,

                `<html>`,
               ` <head>`,
                `<script type="text/javascript">`,
                `<!--function sayHello() {`,
                `alert("Hello World")`,
                `}`,
                `//-->`,
               ` </script>`,
                `</head>`,

                `<body>`,
                `<script type="text/javascript">`,
                `<!--document.write("Hello World")`,
                `//-->`,
                `</script>`,
                    `<input type="button" onclick="sayHello()" value="Say Hello" />`,
               ` </body>`,
                `</html>`
                ]
            },
            {
                head:`বহিঃস্ত বা external ফাইল হিসেবে`,
                text:[`একই জাভাস্ক্রিপ্ট কোড বিভিন্ন ওয়েব পেজে ব্যবহার করতে হলে বা কোডের পরিমান খুব বেশি হলে এক্সটারনাল জাভাস্ক্রিপ্ট ব্যবহার করা হয়। হেড ও বডী উভয় সেকশনেই এক্সটারনাল জাভাস্ক্রিপ্ট ব্যবহার করা যায়। প্রথমে জাভাস্ক্রিপ্ট কোডগুলো একটি কোড এডিটরে লিখতে হবে যেখানে <script> এবং <script> ট্যাগ থাকবে না শুধুমাত্র জাভাস্ক্রিপ্ট কোডগুলো থাকবে। উদাহরণ স্বরূপ নিচে কিছু জাভাস্ক্রিপ্ট কোড দেখুন।`,
            ],
            input:[
                `উদাহরণ`,

                `function sayHello() {`,
                `alert("Hello Visitor")`,
                `}`
            ]
            },
            {
                text:[`তার পর এই কোড গুলো সহ ফাইলটিকে ".js" এক্সটেনশন বা ফরম্যাট দিয়ে সংরক্ষণ বা save করতে হবে। মনে করি ফাইলটিকে "filename.js" নাম দিয়ে সংরক্ষণ বা save করা হল। এরপর একটি এইচটিএমএল কোড লিখতে হবে এবং এখানে <script> ট্যাগের src এট্রিবিউট ব্যবহার করে এইচটিএমএল কোডের সাথে ফাইলটিকে লিংক করে দিতে হবে।`,
            `নিচে একটি উদাহরন দেখুন, যেখানে <script> ট্যাগ ব্যবহার করে "filename.js" নামের জাভাস্ক্রিপ্ট ফাইলটিকে লিংক করা হয়েছে।`],
            input:[
              `  উদাহরণ`,

                `<html>`,
                `<head>`,
                    `<script type="text/javascript" src="filename.js" ></script>`,
                `</head>`,

                `<body>`,
                `.......`,
               ` </body>`,
               ` </html>`
            ]
            }
        ]
    },
    {
        id:4,
        title:`জাভাস্ক্রিপ্ট আউটপুট - JavaScript Output`,
        category:`জাভাস্ক্রিপ্ট আউটপুট`,
        desc:[``],
        titleTwo:[
            {
                head:`data প্রদর্শন`,
                text:[`জাভাস্ক্রিপ্ট বিভিন্ন ভাবে তথ্য বা data প্রদর্শন করে। এগুলো হল নিম্নরূপ।`,
            `document.write()`,
            `console.log()`,
            `innerHTML` ,
             `window.alert()`
        ]
            },
            {
                head:`document.write()`,
                text:[`জাভাস্ক্রিপ্ট কোড গুলো পরীক্ষা করার ক্ষেত্রে document.write() পদ্ধতি ব্যবহার করাই উত্তম। নিচে একটি উদাহরন দেখুন, যেখানে document.write() পদ্ধতি ব্যবহার করা হয়েছে।`],
            input:[
                `উদাহরণ`,

                `<h1>This is a heading.</h1>`,
               ` <p>This is a paragraph.</p>`,
                `<script>`,
                `document.write(2 + 3);`,
                `</script>`
                
            ]
            },
            
            {
                head:`console.log()`,
                text:[`ডিবাগিং বা debugging করার ক্ষেত্রে console.log() পদ্ধতি ব্যবহার করাই উত্তম। এক্ষেত্রে console.log() ব্যবহার করে ওয়েব ব্রাউজারকে তথ্য বা data প্রদর্শন করতে বলা হয়।`,
            `console.log() ব্যবহার করে নিচে একটি উদাহরন দেখুন।`],
            input:[
                `উদাহরণ`,

               
              
                `<!DOCTYPE html>`,
                `<html>`,
                `<body>`,
                ` <script >`,
                ` console.log(5 + 6);`,
                    `</script>`,
                    
               ` </body>`,
                `</html>`
            ]
            },
            {
                head:`innerHTML`,
                text:[`document.getElementById(id) ব্যবহার করে জাভাস্ক্রিপ্ট কোন এইচটিএমএল এলিমেন্টকে নির্দেশ করতে পারে। এক্ষেত্রে id আত্ত্রিবুতটি এইচটিএমএল এলিমেন্টকে নির্দেশ করে এবং innerHTML প্রোপার্টি এইচটিএমএল কন্টেন্ট।`,`id ও innerHTML ব্যবহার করে নিচে একটি উদাহরন দেখুন।`],
                input:[
                    `উদাহরণ`,

                    `উদাহরণ`,

               
              
                    `<!DOCTYPE html>`,
                    `<html>`,
                    `<body>`,
                    `<p id="display"></p>`,
                    ` <script >`,
                   
                        `document.getElementById("display").innerHTML = 20 + 20;`,
                        
                   ` </body>`,
                    `</html>`
                ]
            },
            {
                head:`window.alert()`,
                text:[`একটি এলার্ট বক্স ব্যবহার করে অর্থাৎ একটি এলার্ট বক্সের মাদ্ধমে জাভাস্ক্রিপ্টে তথ্য বা data প্রদর্শন করা যায়। এর জন্য জাভাস্ক্রিপ্ট এর window.alert() প্রোপার্টি ব্যবহার করা যায়।`,
                `নিচে জাভাস্ক্রিপ্ট এর window.alert() প্রোপার্টি ব্যবহার করে একটি উদাহরন দেখুন।`
            ],
            input:[
                `উদাহরণ`,

                `<!DOCTYPE html>`,
                    `<html>`,
                    `<body>`,
                    `<h1>This is a heading.</h1>`,
                    `<p>This is a paragraph.</p>`,
                    ` <script >`,
                   
                        `window.alert(5 + 6);`,
                        
                   ` </body>`,
                    `</html>`
            ]
            },
            { 
                 head:`window.print()`,
                text:[`জাভাস্ক্রিপ্ট এর কোন প্রিন্ট অবজেক্ট নেই, যার ফলে জাভাস্ক্রিপ্ট ব্যবহার করে আউটপুট ডিভাইস এর অপর কোন নিয়ন্ত্রন পাওয়া যায় না। কিন্তু window.print() প্রোপার্টি ব্যবহার করে বর্তমান স্ক্রীন বা current window তে থাকা কন্টেন্টকে প্রিন্ট করা যায়।`,
            `জাভাস্ক্রিপ্ট এর window.print() প্রোপার্টি ব্যবহার করে নিচে একটি উদাহরন দেখুন।`],
            input:[
              `  উদাহরণ`,

                `<html>`,
                

                `<body>`,
                `<button onclick="window.print()">Print this web  page`,
               ` </body>`,
               ` </html>`
            ]
            }
        ]
    },
    {
        id:5,
        title:`জাভাস্ক্রিপ্ট কমেন্ট - JavaScript Comment`,
        category:`জাভাস্ক্রিপ্ট কমেন্ট`,
        desc:[`কমেন্ট হল এমন কোন লেখা বা text যা প্রোগ্রামের সাথেই থাকে কিন্তু এটি প্রোগ্রামের কোন অংশ নয়। কমেন্ট লেখা হয় প্রোগ্রামার এর সুবিধার জন্য। জাভাস্ক্রিপ্টে কমেন্ট এর ব্যবহার প্রোগ্রামকে আরও সাবলীল ও সহজপাঠ্য করে তোলে। প্রোগ্রামের বিভিন্ন অংশ সহজে ব্যাখ্যা করতে জাভাস্ক্রিপ্ট কমেন্ট বেশ অতুলনীয় ভূমিকা পালন করে।`,`ধরা যাক কোন জটিল প্রোগ্রামের ক্ষেত্রে প্রোগ্রামের বিভিন্ন স্থানে বারবার কাজ করতে হচ্ছে, এই ক্ষেত্রে যদি প্রোগ্রামের জটিল এবং গোলমেলে স্থান গুলোতে একটি করে নোট বা কমেন্ট যুক্ত করে রাখা যায়, তবে কাজ করতে সুবিধা হবে।`],
        titleTwo:[
            {
                head:`প্রতি লাইনের শেষে কমেন্ট`,
                text:[`জাভাস্ক্রিপ্ট প্রোগ্রামে প্রতি লাইনের শেষেই ভিন্ন ভিন্ন কমেন্ট লেখা যায়। এর জন্য কোড বা লাইনের সামনে ২টি স্লাশ "//" চিহ্ন দিতে হবে এবং এই স্লাশ চিহ্নের ডান দিকে লেখা সকল লেখা বা text ই কমেন্ট হিসেবে প্রদর্শিত হবে বা কাজ করবে। স্লাশ চিহ্নের পরে এই লাইনের সকল লেখাই কমেন্ট কিন্তু পরবর্তী লাইনে আবার যথারীতি জাভাস্ক্রিপ্ট প্রোগ্রাম শুরু হবে।`,
            `নিচে কিছু জাভাস্ক্রিপ্ট কোড দেখুন, যেখানে একটি এক লাইনের কমেন্ট রয়েছে।`],
            input:[
                `উদাহরণ`,

          `  <script type="text/javascript">`,
            `document.write("Hello"); // Write "Hello"`,
            `document.write(" Friends!"); // Write " Friends!"`,
            `</script>`
            ]
            },
            {
                head:`একাধিক লাইন বিশিষ্ট কমেন্ট`,
                text:[`একাধিক লাইন বিশিষ্ট কমেন্ট শুরু হয় একটি স্লাশ ও একটি তারকা চিহ্ন দিয়ে এবং শেষ হয় একটি তারকা ও একটি স্লাশ চিহ্ন দিয়ে। " /* " চিহ্ন থেকে " */ " চিহ্ন পর্যন্ত সকল লেখাই কমেন্ট হিসেবে কাজ করবে।`,`নিচে জাভাস্ক্রিপ্টে একাধিক লাইন বিশিষ্ট কমেন্টের একটি উধাহরণ দেখুন।`],
                input:[
                    `উদাহরণ`,

          `  <script type="text/javascript">`,
          `/*
          `,
            `এই স্থানে ১ম কমেন্ট লিখুন`,
            `এই স্থানে ২য় কমেন্ট লিখুন`,
            `document.write(" Friends!"); // Write " Friends!"`,
            `</script>`
                ]
            }
        ]
    },
    {
        id:6,
        title:`জাভাস্ক্রিপ্ট সিনট্যাক্স - JavaScript Syntax`,
        category:`জাভাস্ক্রিপ্ট সিনট্যাক্স`,
        desc:[`জাভাস্ক্রিপ্ট সিনট্যাক্স হল কত গুলো নিয়ম বা rules এর সমন্বিত রুপ, যা কোন জাভাস্ক্রিপ্ট প্রোগ্রাম কিভাবে কাজ করবে তা নির্ধারণ করে।`,`যেমন, নিচে কিছু জাভাস্ক্রিপ্ট সিনট্যাক্স এর বাবহারিক উদাহরণ দেখুন।`],
        titleTwo:[
            {
                head:``,
                text:[``],
            input:[
                `সিনট্যাক্স`,

          `  var x, y, z;   `,
            `x = 5; y = 6; `,
            `z = x + y;    `
            
            ]
            },
            {
                head:`জাভাস্ক্রিপ্টে মান বা value`,
                    text:[`জাভাস্ক্রিপ্ট সিনট্যাক্স ব্যবহার করে ২ প্রকার মান বা value নির্ধারণ করা যায়।`,
                    `নির্দিষ্ট বা fixed মান`,
                `পরিবর্তনশীল বা variable মান`]
               
            },
            {
                head:`নির্দিষ্ট বা fixed মান`,
                text:[`সংখ্যা বা number ব্যবহার করে নির্দিষ্ট বা fixed মান লেখার গুরুত্বপূর্ণ পদ্ধতি গুলো নির্ভর করে দসমিক বা decimal সংখ্যা পদ্ধতির ওপর। এদের একটি হল দশমিক বাদ দিয়ে এবং অন্যটি হল দশমিক ব্যবহার করে। নিচে দশমিক সংখ্যা পদ্ধতি ব্যবহার করে জাভাস্ক্রিপ্ট এর নির্দিষ্ট বা fixed মান লেখার পদ্ধতি দেখুন।`],
                input:[
                    `উদাহরণ`,
                    
                    `10.52`,
                   ` 1010`
                ]
            },
            {
                head:`পরিবর্তনশীল বা variable মান`,
                text:[`variable হল একটি প্রতীকি বা symbolic নাম যা নির্দিষ্ট করে দেয়া কোন মান বা Value কে উপস্থাপন করে। ভেরিয়েবল এর উদ্দেশ্য হল তথ্য বা data জমা রাখা যাতে পরবর্তীতে সেগুলো ব্যবহার করা যায়।`,
            `জাভাস্ক্রিপ্টে var কিওয়ার্ড ব্যবহার করে কোন variable উল্লেখ করা হয় এবং এর পরে একটি সমান বা equal ছিনহ ব্যবহার করে ভেরিয়েবল এর মান বা value নির্ধারণ করা হয়। নিচে একটি উদাহরন দেখুন, এখানে z হল একটি ভেরিয়েবল এবং এর মান নির্ধারণ করা হয়েছে " 20 ", এর ফলে, প্রোগ্রামের যেসকল স্থানে var z থাকবে, সেখানে ভেরিয়েবল এর মান হিসেবে " 20 " প্রদর্শিত হবে।`],
            input:[
                `উদাহরণ`,

                `<p id="variable"></p>`,

                `<script>`,
                `var z;`,
                `z = 6;`,
               ` document.getElementById("variable").innerHTML = z;`,
                `</script>`
            ]
            },
            {
                head:`জাভাস্ক্রিপ্ট এক্সপ্রেশন`,
                text:[`জাভাস্ক্রিপ্ট ভেরিয়েবল, মান বা value এবং জাভাস্ক্রিপ্ট অপারেটর এর সমন্বিত রূপ যা একটি গাণিতিক হিসেব করতে পারে, তাই হল একটি জাভাস্ক্রিপ্ট এক্সপ্রেশন।`,
            `জাভাস্ক্রিপ্ট এক্সপ্রেশন এর মান বা value হতে পারে কোন সংখ্যা বা কোন লেখা, এমনকি এটি কোন ভেরিয়েবলও হতে পারে। নিচে জাভাস্ক্রিপ্ট এক্সপ্রেশন এর একটি উদাহরন দেখুন।`],
            input:[
                `উদাহরণ`,

                `<p>I LOVE <span id="exp"></span></p>`,

                `<script>`,
               
               `document.getElementById("exp").innerHTML = "YOU" +" "+ "HONNY"`,
                `</script>`
            ]
            },
            {
                head:`Identifier`,
                text:[`ভেরিয়েবল গুলোকে নির্ধারিত নাম দিতে জাভাস্ক্রিপ্টে Identifier ব্যবহার করা হয়। জাভাস্ক্রিপ্টে Identifier এর নামের প্রথম অক্ষর বা character অবশ্যই একটি বর্ণ বা letter অথবা আনডারস্কোর বা underscore ( _ ) অথবা ডলার বা Doller ছিনহ অর্থাৎ ( $ ) হতে হবে।`,
            `তবে পরবর্তী অক্ষর গুলো হতে পারে কোন বর্ণ বা letter, কোন সংখ্যা, আনডারস্কোর বা underscore ( _ ) অথবা ডলার বা Doller ছিনহ অর্থাৎ ( $ ) .`]
            }
        ]
    },
    {
        id:7,
        title:`জাভাস্ক্রিপ্ট স্টেটমেন্ট - JavaScript Statement`,
        category:`জাভাস্ক্রিপ্ট স্টেটমেন্ট`,
        desc:[`জাভাস্ক্রিপ্ট হল এক বা একাধিক পর্যায়ক্রমিক স্টেটমেন্টের সমষ্টি যেগুলো ওয়েব ব্রাউজার দ্বারা চালু বা execute হয়। সকল জাভাস্ক্রিপ্ট স্টেটমেন্ট ওয়েব ব্রাউজারকে নির্দেশ প্রদান করে।`],
        titleTwo:[
            {
                head:`জাভাস্ক্রিপ্ট প্রোগ্রাম`,
                text:[`একটি কম্পিউটার প্রোগ্রাম হল আসলে কত গুলো নির্দেশ বা instruction এর সংঘবধ্য রূপ, যা কোন কম্পিউটার ব্যবহার করে চালু হয় বা execute করে।`,`জাভাস্ক্রিপ্টের ক্ষেত্রে নির্ধারিত গুলো নির্দেশ বা instruction এর সংঘবধ্য রূপটিই হল জাভাস্ক্রিপ্ট স্টেটমেন্ট। সাধারণত এক বা একাধিক জাভাস্ক্রিপ্ট স্টেটমেন্ট মিলে কোন জাভাস্ক্রিপ্ট প্রোগ্রাম তৈরি হয়। এইচটিএমএল এর ক্ষেত্রে, জাভাস্ক্রিপ্ট প্রোগ্রাম গুলো ওয়েব ব্রাউজার দ্বারা চালু হয় বা execute হয়।`]
            },
            {
                head:`জাভাস্ক্রিপ্ট স্টেটমেন্ট`,
                    text:[`জাভাস্ক্রিপ্টের স্টেটমেন্ট গুলো আসলে ওয়েব ব্রাউজারকে প্রোগ্রাম অনুসারে নির্দেশ প্রদান করে। আর এই নির্দেশ গুলোর উদ্দেশ্য হল কি করতে হবে ওয়েব ব্রাউজারকে তা বলে দেয়া। অর্থাৎ এক একটি সম্পূর্ণ প্রোগ্রামই হল আসলে জাভাস্ক্রিপ্ট স্টেটমেন্ট।`,
                    `নিচে একটি জাভাস্ক্রিপ্ট স্টেটমেন্ট এর উদাহরন দেখুন। এখানে "Hellow Friends" লেখাটি ওয়েব ব্রাউজারে প্রদর্শন করতে চাই তবে আমাদেরকে নিচের মত জাভাস্ক্রিপ্ট কোড লিখতে হবে।`],
                    input:[
                        `উদাহরণ`,

                        `document.write("Hello Friends");`
                    ]
               
            },
            {
                text:[`প্রতিটি জাভাস্ক্রিপ্ট স্টেটমেন্টের শেষে সেমিকোলন " ; " চিহ্ন দিতে হয়, এটা optional অর্থাৎ না দিলেও কোড কাজ করবে। প্রতিটা স্টেটমেন্ট এক লাইনে লিখতে হয়। তবে যদি স্টেটমেন্ট এক লাইনের না হয় বা একাধিক স্টেটমেন্ট এক লাইনে লিখতে হলে প্রতিটা স্টেটমেন্টের শেষে সেমিকোলন চিহ্ন অবশ্যই দিতে হবে।`,
            `নিচে জাভাস্ক্রিপ্ট স্টেটমেন্ট এর উদাহরণ দেখুন।`],
            input:[
                `উদাহরণ`,
                `<html>`,
                `<body>`,
                `<script type="text/javascript">`,
                `<document.write("<h1>This is a heading</h1>");`,
                `<document.write("<p>This is a paragraph.</p>");`,
                `<document.write("<p>This is another paragraph.</p>");`,
              `</script>`,
          `  </body>`,
           ` </html>`
            ]
            },
            {
                head:`সেমিকোলন`,
                text:[`জাভাস্ক্রিপ্ট স্টেটমেন্ট গুলো কে আলাদা করার জন্য সেমিকোলন ছিনহ অর্থাৎ " ; " ব্যবহার করতে হয়। স্টেটমেন্ট গুলো কে আলাদা করার জন্য প্রতিটি জাভাস্ক্রিপ্ট স্টেটমেন্ট এর শেষে একটি সেমিকোলন ব্যবহার করুন।`,`নিচে সেমিকোলন ছিনহ ব্যবহার করে একটি উদাহরন দেখুন।`],
                input:[
                    `উদাহরণ`,
                   ` var x, y, z;`,
                   ` x = 50;`,
                  `  y = 60;`,
                    `z = x * y;`
                ]
            },
            {
                head:`জাভাস্ক্রিপ্টে white space`,
                text:[`জাভাস্ক্রিপ্টের কোডে white space ব্যবহার করা যায় না, করলেও জাভাস্ক্রিপ্ট কোড অর্থাৎ ব্রাউজার তা উপেক্ষা করে। তবে জাভাস্ক্রিপ্ট কোড গুলো পড়ার সুবিধার জন্য প্রয়োজন মত white space ব্যবহার করা যায়।`,
            `নিচে জাভাস্ক্রিপ্ট এর একটি উদাহরন দেখুন, যেখানে বাড়তি white space ব্যবহার করা হয়েছে।`],
            input:[
                `উদাহরণ`,

                `var fullName = "Sunny";`,
`                    var fullName="Sunny";`
            ]
            },
            {
                head:`লাইনের দৈর্ঘ্য ও লাইন ব্রেক`,
                text:[`জাভাস্ক্রিপ্ট কোড গুলো পড়ার সুবিধার জন্য সাধারণত ৮০টির বেসি ক্যারেক্টার যুক্ত লাইন তৈরি না করাই ভাল। যদি সম্পূর্ণ জাভাস্ক্রিপ্ট কোড, একটি লাইনে সংকুলান না হয়, তবে সাধারণত একটি অপারেটর বাবহারের পর লাইন ব্রেক নেয়া উচিৎ।

                `,
            `নিচে একটি উদাহরন দেখুন, যেখানে জাভাস্ক্রিপ্ট কোডে একটি লাইন ব্রেক তৈরি করা হয়েছে।`],
            input:[
                `উদাহরণ`,

         

               ` document.getElementById("example").innerHTML =`,
                `"Miss You Sunny!";`
            ]
            },
            {
                head:`জাভাস্ক্রিপ্ট ব্লক`,
                text:[`জাভাস্ক্রিপ্ট স্টেটমেন্ট গুলো সাধারণত গুছ বা group আকারে একটি ব্লকের মাঝে থাকে। কোন জাভাস্ক্রিপ্ট ব্লক তৈরি হয় একটি বা দিকে বাঁকানো ২য় বন্ধনী চিহ্ন " { " দিয়ে এবং শেষ হয় ডানে বাঁকানো ২য় বন্ধনী চিহ্ন " } " দিয়ে। জাভাস্ক্রিপ্ট ব্লক তৈরি করার কারন হল পর্যায়ক্রমিক কত গুলো জাভাস্ক্রিপ্ট স্টেটমেন্টকে একসাথে চালু করা বা execute করা।`,
            `নিচে একটি জাভাস্ক্রিপ্ট ব্লকের উদাহরণ দেখুন, যেখানে একটি জাভাস্ক্রিপ্ট কোড ব্লক তৈরি করা হয়েছে।`],
            input:[
                `উদাহরণ`,

                `function myFunction() {`,
                `document.getElementById("example1").innerHTML = "Hi Sunny!";`,
                `document.getElementById("example2").innerHTML = "Hope you are well!";`,
               ` }`
            ]
            }
        ]
    },
    {
        id:8,
        title:`জাভাস্ক্রিপ্ট ভেরিয়েবল - JavaScript Variable`,
        category:`জাভাস্ক্রিপ্ট ভেরিয়েবল`,
        desc:[`ভেরিয়েবল হচ্ছে একটি পাত্রের মত যেখানে আমরা তথ্য বা data রাখতে পারি। যেমন কোন টেক্সট স্ট্রিং - "Hello Bangladesh” বা কোন গাণিতিক মান যেমন - 200,300, 1002 ইত্যাদি। অর্থাৎ ভেরিয়েবল হল তথ্য বা data জমা রাখার একটি পাত্রের মত যা মান বা কোন expression ধারন করতে পারে।`],
        titleTwo:[
            {
                head:`ভেরিয়েবল কি?`,
                text:[`জাভাস্ক্রিপ্ট ভেরিয়েবল হল একটি প্রতীকি বা symbolic নাম যা নির্দিষ্ট করে দেয়া মান বা Value উপস্থাপন করে। ভেরিয়েবল বাবহারের কারন হল কোন তথ্যকে জমা রাখা যাতে পরবর্তীতে কোডে ব্যবহার করা যায়।`,`ভেরিয়েবল নামকে যদি আমরা একটি ব্যাগের সাথে তুলনা করি তবে ব্যাগের ভেতরে থাকা সমস্ত জিনিস গুলো হল এক একটি তথ্য বা data। ভেরিয়েবল নাম দ্বারা সহজেই তথ্য বা data কে সরানো বা ব্যবহার করা যায়।`,
            `জাভাস্ক্রিপ্টে var কিওয়ার্ড ব্যবহার করে কোন variable উল্লেখ করা হয় এবং এর পরে একটি সমান বা equal ছিনহ ব্যবহার করে ভেরিয়েবল এর মান বা value নির্ধারণ করা হয়। নিচে একটি উদাহরন দেখুন, এখানে z হল একটি ভেরিয়েবল এবং এর মান নির্ধারণ করা হয়েছে " 20 ", এর ফলে, প্রোগ্রামের যেসকল স্থানে var z থাকবে, সেখানে ভেরিয়েবল এর মান হিসেবে " 20 " প্রদর্শিত হবে।`],
            input:[
                `উদাহরণ`,

                `<p id="example"></p>`,

               ` <script>`,
              `  var z;`,
             `   z = 20;`,
               ` document.getElementById("example").innerHTML = z;`,
                `</script>`
            ]
            },
            {
                head:`জাভাস্ক্রিপ্ট স্টেটমেন্ট`,
                    text:[`জাভাস্ক্রিপ্টের স্টেটমেন্ট গুলো আসলে ওয়েব ব্রাউজারকে প্রোগ্রাম অনুসারে নির্দেশ প্রদান করে। আর এই নির্দেশ গুলোর উদ্দেশ্য হল কি করতে হবে ওয়েব ব্রাউজারকে তা বলে দেয়া। অর্থাৎ এক একটি সম্পূর্ণ প্রোগ্রামই হল আসলে জাভাস্ক্রিপ্ট স্টেটমেন্ট।`,
                    `নিচে একটি জাভাস্ক্রিপ্ট স্টেটমেন্ট এর উদাহরন দেখুন। এখানে "Hellow Friends" লেখাটি ওয়েব ব্রাউজারে প্রদর্শন করতে চাই তবে আমাদেরকে নিচের মত জাভাস্ক্রিপ্ট কোড লিখতে হবে।`],
                    input:[
                        `উদাহরণ`,

                        `document.write("Hello Friends");`
                    ]
               
            },
            {
                text:[`প্রথমবার ভেরিয়েবল ব্যবহার করার ক্ষেত্রে ভেরিয়েবল নামের পূর্বে var লেখা জরুরী নয় তবে ভালো প্রোগ্রামিং এর জন্য প্রথমবার ভেরিয়েবল নামের পূর্বে var লেখা উচিৎ। নিচে এসংক্রান্ত একটি উদাহরণ দেখুন।`],
            input:[
                `উদাহরণ`,
                `<script type="text/JavaScript">`,
                    `<!--04.var linebreak = "`,
                  `  "`,
                  `  var my_var = "Hello World!"`,

                    `document.write(my_var)`,
                   ` document.write(linebreak)`,

                   ` my_var = "I am learning JavaScript!",
                    document.write(my_var)`,
                   ` document.write(linebreak)`,

                   ` my_var = "Script is Finishing up..."`,
                  `  document.write(my_var)`,
                  `  //-->`,
                    `</script>`
            ]
            },
            {
                head:`ভেরিয়েবল এর বৈশিষ্ট`,
                text:[`সাধারনত কোন ভেরিয়েবল এর যে সকল বৈশিষ্ট থাকে সেগুলো নিছে দেখুন।`,
            `ভেরিয়েবলের নাম কেজ সেন্সিটিভ তাই এ ব্যাপারে সতর্ক থাকতে হবে। যেমন A এবং a এক নয়।`,
            `ভেরিয়েবলের নাম অবশ্যই কোন বর্ণ উদাহরণস্বরূপ " A থেকে Z " পর্যন্ত বা " a থেকে z " পর্যন্ত বা আণ্ডারস্কোর " _ " অথবা ডলার " $ " ছিনহ দিয়ে শুরু হবে,`,
            `ভেরিয়েবলের নামে যে কোন বর্ণমালা বা সংখ্যা বা আণ্ডারস্কোর থাকতে পারে,`,
            `ভেরিয়েবলের নামের মাঝে কোন স্পেস থাকতে পারবে না,`,
            `ভেরিয়েবলের নামের মাঝে কোন চিহ্ন যেমন - কমা, ফুলস্টপ ব্যবহার করা যাবে না,`,
            `ভেরিয়েবল এর শুরুতে কোন সংখ্যা ব্যবহার করা যাবে না,`,
            `ভেরিয়েবলের নাম হিসেবে জাভাস্ক্রিপ্টের সংরক্ষিত শব্দ বা Reserved Word গুলো ব্যবহার করা যাবে না।`
            ]
            },
            {
                head:`ভেরিয়েবল এর প্রকারভেদ`,
                text:[`ভেরিয়েবল কে বাবহারের ওপর ভিত্তি দুই ভাগে ভাগ করা যায়। নিচে এর নাম গুলো দেখুন।`,
            `Local ভেরিয়েবল`,
        `Global ভেরিয়েবল`,
    `নিছে কিছু জাভাস্ক্রিপ্ট কোড দেখুন, যেখানে Local এবং Global ভেরিয়েবল এর উদাহরণ দেখানো হয়েছে।`],
            input:[
                `উদাহরণ`,
               ` let globalVar = "It's a global variable"; `,

               ` function fun() { `,
             `   let localVar = "It's a local variable"; `,
                
                `console.log(globalVar); `,
                `console.log(localVar); `,
               ` } `,
                
              `  fun(); `
            ]
            }
          
        ]
    },
    {
        id:9,
        title:`জাভাস্ক্রিপ্ট ডাটা টাইপ - JavaScript Data Type`,
        category:` ডাটা টাইপ `,
        desc:[`বিভিন্ন রকম মান বা value ধারন করতে অর্থাৎ ভিন্ন ভিন্ন প্রকার data নিয়ে কাজ করার জন্য জাভাস্ক্রিপ্টে বিভিন্ন প্রকার data type নির্ধারণ করা আছে। যেমন কোন লেখা বা text এর জন্য এক প্রকার, কোন সংখ্যার জন্য ভিন্ন প্রকার ইত্যাদি।`],
        titleTwo:[
            {
                head:`Data type`,
                text:[`Data type যে কোন প্রোগ্রামিং ভাষার ক্ষেত্রে একটি প্রধান বিবেচ্ছ বিষয়। কোন ভেরিয়েবল নিয়ে কাজ করার ক্ষেত্রে এটা জানা প্রয়োজন, যে সেটি কোন প্রকার তথ্য বা data, উদাহরণ স্বরূপ নিচের কোড গুলো দেখুন।`],
            input:[
               ` উদাহরণ`,

                `var x= 12 + Apple`
            ]
            },
            {
                text:[`এখানে data type নির্ধারণ করে দেয়া হয় নি বলে, "Apple" এই লেখাটি কেও 12 এর সাথে যোগ করে প্রদর্শন করবে অর্থাৎ " 12Apple " লেখা দেখাবে। কারন কোন সংখ্যা বা numbar এর সাথে কোন text string যোগ করতে হলে, জাভাস্ক্রিপ্ট সংখ্যাকেও, string হিসেবে ধরে নেয়।`]
            },
            {
                head:`প্রকারভেদ`,
                    text:[`জাভাস্ক্রিপ্টে 2 প্রকার তথ্য বা data রয়েছে, এগুলো হল নিম্নরূপ।`,
                    `Primitive ডাটা টাইপ এবং`,
                `Non-primitive বা reference ডাটা টাইপ`]
                    
            },
            {
                head:`Primitive ডাটা টাইপ`,
                text:[`জাভাস্ক্রিপ্টে 5 প্রকার Primitive ডাটা টাইপ রয়েছে। এগুলো হল নিম্নরূপ -`,
            `String -`,
            `Number - গাণিতিক বা numeric মান নির্ধারণ করে,`,
            `Undefined - Undefined মান নির্ধারণ করে,`,
            `Boolean - কেবল মাত্র দুইটি মান বা value ব্যবহার করে অর্থাৎ "true" এবং "false" ব্যবহার করে মান নির্ধারণ করে,`,
            `Null - শূন্য বা null মান নির্ধারণ করে,`
        ]
            },
            {
                head:`Non-primitive বা reference ডাটা টাইপ`,
                text:[`জাভাস্ক্রিপ্টে 3 প্রকার Non-primitive বা reference ডাটা টাইপ রয়েছে। এগুলো হল নিম্নরূপ -`,
            `Object -`,
            `Array - একই রকম মান বা value গুলোর গুচ্ছ বা group তৈরি করে,`,
            `RegExp - regular expression গুলো তৈরি করে,`,
        
            ]
            },
           
            
          
        ]
    }
    
]